//2.15 함수
-1. 동일하게 동작한다.

-2. 1)
function checkAge(age) {
  return (age > 18) ? true : confirm('보호자의 동의를 받으셨나요?');
}
2)
function checkAge(age) {
  return (age > 18) || confirm('보호자의 동의를 받으셨나요?');
}

-3. 1)
function min(a, b) {
  if (a < b) {
    return a;
  } else {
    return b;
  }
}
2)
function min(a, b) {
  return a < b ? a : b;
}

-4. 
function pow(x, n) {
  let result = x;

  for (let i = 1; i < n; i++) {
    result *= x;
  }

  return result;
}

let x = prompt("x?", '');
let n = prompt("n?", '');

if (n < 1) {
  alert(`${n}은 양의 정수이어야 합니다.`);
} else {
  alert( pow(x, n) );
}

//2.17 화살표 함수 기본
- 화살표 함수로 변경하기
function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

ask(
  "동의하십니까?",
  () => alert("동의하셨습니다."),
  () => alert("취소 버튼을 누르셨습니다.")
);

//8.1 프로토타입 상속
-1. 1) true
    2) null
    3) undefined
    
-2. 1)
let head = {
  glasses: 1
};

let table = {
  pen: 3,
  __proto__: head
};

let bed = {
  sheet: 1,
  pillow: 2,
  __proto__: table
};

let pockets = {
  money: 2000,
  __proto__: bed
};

alert( pockets.pen ); 
alert( bed.glasses ); 
alert( table.money ); 
2)차이가 없다.

//8.2 함수의 prototype 프로퍼티
-1.
-2. 
function User(name) {
  this.name = name;
}

let user = new User('John');
let user2 = new user.constructor('Pete');

alert( user2.name );

<예시>
function User(name) {
  this.name = name;
}
User.prototype = {};

let user = new User('John');
let user2 = new user.constructor('Pete');

alert( user2.name );

//8.3 네이티브 프로토타입
-1. 
Function.prototype.defer = function(ms) {
  setTimeout(this, ms);
};

function f() {
  alert("Hello!");
}

f.defer(1000);
-2. 
Function.prototype.defer = function(ms) {
  let f = this;
  return function(...args) {
    setTimeout(() => f.apply(this, args), ms);
  }
};

let user = {
  name: "John",
  sayHi() {
    alert(this.name);
  }
}

user.sayHi = user.sayHi.defer(1000);

user.sayHi();

//8.4 프로토타입 메서드와 proto가 없는 객체
-1. et dictionary = Object.create(null, {
  toString: { 
    value() { 
      return Object.keys(this).join();
    }
  }
});

dictionary.apple = "Apple";
dictionary.__proto__ = "test";

for(let key in dictionary) {
  alert(key);
}

alert(dictionary); // "apple,__proto__"
-2. 
function Rabbit(name) {
  this.name = name;
}
Rabbit.prototype.sayHi = function() {
  alert( this.name );
}

let rabbit = new Rabbit("Rabbit");

rabbit.sayHi();                        
Rabbit.prototype.sayHi();              
Object.getPrototypeOf(rabbit).sayHi(); 
rabbit.__proto__.sayHi();             

